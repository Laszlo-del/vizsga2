import time
from gpiozero import PWMLED
import Adafruit_DHT
import RPi.GPIO as GPIO
import requests # A Thingspeakhez sz√ºks√©ges
import datetime # Az id≈ëb√©lyegekhez √©s a t√∂rl√©shez

# --- GPIO be√°ll√≠t√°sok ---
GPIO.setmode(GPIO.BCM)

# --- DHT Szenzor be√°ll√≠t√°sok ---
DHT_SENSOR = Adafruit_DHT.DHT11
DHT_PIN = 17 # Alap√©rtelmezett DHT11 szenzor GPIO pin

# --- H≈ëm√©rs√©kleti limit a LED jelz√©shez ---
TEMP_LIMIT = 20

# --- LED sz√≠nek list√°ja ---
COLORS = ['piros', 'z√∂ld', 'k√©k']

# --- Alap√©rtelmezett GPIO kioszt√°s a LED-ekhez ---
gpio_pins = {
    'piros': 21,
    'z√∂ld': 16,
    'k√©k': 20
}

# --- Alap√©rtelmezett LED sz√≠n viselked√©s ---
led_below_limit = 'piros' # <= TEMP_LIMIT eset√©n
led_above_limit = 'k√©k'   # > TEMP_LIMIT eset√©n

# --- Thingspeak be√°ll√≠t√°sok ---
THINGSPEAK_WRITE_API_KEY = 'IDE_JON_A_SAJAT_WRITE_API_KULCSOD' # Ezt a csatorn√°d oldal√°n tal√°lod
THINGSPEAK_USER_API_KEY = 'IDE_JON_A_SAJAT_USER_API_KULCSOD'   # Ezt az 'Account' -> 'My Profile' alatt tal√°lod
THINGSPEAK_CHANNEL_ID = 'IDE_JON_A_SAJAT_CSATORNA_ID_D'        # Ezt a csatorn√°d oldal√°n tal√°lod
THINGSPEAK_URL = "https://api.thingspeak.com/update"
THINGSPEAK_DELETE_URL_BASE = "https://api.thingspeak.com/channels/"

# LED p√©ld√°nyok t√°rol√°sa
leds = {}

# --- Seg√©df√ºggv√©nyek ---

def init_leds():
    """Inicializ√°lja a LED-eket a jelenlegi GPIO be√°ll√≠t√°sok alapj√°n, vagy friss√≠ti azokat."""
    global leds
    for led in leds.values():
        led.close() # Felszabad√≠tja a kor√°bbi GPIO er≈ëforr√°sokat
    leds = {
        'piros': PWMLED(gpio_pins['piros']),
        'z√∂ld': PWMLED(gpio_pins['z√∂ld']),
        'k√©k': PWMLED(gpio_pins['k√©k'])
    }
    print("‚úÖ LED-ek inicializ√°lva az √∫j GPIO-kkal.")

def set_led(color):
    """Be√°ll√≠tja a megadott sz√≠n≈± LED-et, a t√∂bbit kikapcsolja."""
    for led in leds.values():
        led.value = 0 # Minden LED kikapcsol√°sa
    if color in leds:
        leds[color].value = 1 # A kiv√°lasztott LED bekapcsol√°sa
        print(f"üîî LED: {color.upper()} ({'<=20¬∞C' if color == led_below_limit else '>20¬∞C'})")
    else:
        print(f"‚ö†Ô∏è Hib√°s LED sz√≠n megadva: {color}")

def send_to_thingspeak(temp, hum):
    """Elk√ºldi a h≈ëm√©rs√©kletet √©s p√°ratartalmat a Thingspeakre."""
    if not THINGSPEAK_WRITE_API_KEY or not THINGSPEAK_CHANNEL_ID:
        print("‚ùå Thingspeak API kulcs vagy csatorna ID hi√°nyzik. Adatk√ºld√©s kihagyva.")
        return

    try:
        payload = {
            'api_key': THINGSPEAK_WRITE_API_KEY,
            'field1': temp, # Els≈ë mez≈ë a h≈ëm√©rs√©kletnek
            'field2': hum    # M√°sodik mez≈ë a p√°ratartalomnak
        }
        response = requests.get(THINGSPEAK_URL, params=payload)

        if response.status_code == 200:
            print("‚¨ÜÔ∏è Adatok elk√ºldve Thingspeakre.")
        else:
            print(f"‚ùå Hiba a Thingspeak k√ºld√©skor: {response.status_code} - {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è H√°l√≥zati hiba a Thingspeak k√ºld√©skor: {e}")

def delete_thingspeak_data(minutes_ago):
    """T√∂rli az adatokat a Thingspeakr≈ël egy megadott id≈ëintervallumb√≥l."""
    if not THINGSPEAK_USER_API_KEY or not THINGSPEAK_CHANNEL_ID:
        print("‚ùå Thingspeak User API kulcs vagy csatorna ID hi√°nyzik. T√∂rl√©s kihagyva.")
        return

    # T√∂rl√©s az aktu√°lis id≈ë m√≠nusz 'minutes_ago' id≈ëpontig
    delete_before_date = datetime.datetime.now() - datetime.timedelta(minutes=minutes_ago)

    delete_url = f"{THINGSPEAK_DELETE_URL_BASE}{THINGSPEAK_CHANNEL_ID}/feeds.json"
    params = {
        'api_key': THINGSPEAK_USER_API_KEY,
        'end': delete_before_date.isoformat(sep=' ', timespec='seconds')
    }

    print(f"Adatok t√∂rl√©se a {THINGSPEAK_CHANNEL_ID} csatorn√°r√≥l {minutes_ago} perccel ezel≈ëtti id≈ëpontig ({delete_before_date} el≈ëtt).")
    try:
        response = requests.delete(delete_url, params=params)

        if response.status_code == 200:
            print("‚úÖ Adatok sikeresen t√∂r√∂lve a Thingspeakr≈ël!")
        else:
            print(f"‚ùå Hiba a Thingspeak t√∂rl√©skor: {response.status_code} - {response.text}")
            print("Tipp: Ellen≈ërizd a USER_API_KEY-t, az kell a t√∂rl√©shez!")
    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è H√°l√≥zati hiba a Thingspeak t√∂rl√©skor: {e}")

# --- Konfigur√°ci√≥s men√ºpontok ---

def change_gpio_pins():
    """Lehet≈ëv√© teszi a LED GPIO portjainak m√≥dos√≠t√°s√°t."""
    print("\nüéõÔ∏è GPIO portok m√≥dos√≠t√°sa:")
    for color in COLORS:
        try:
            pin = int(input(f"{color.upper()} LED GPIO (jelenleg {gpio_pins[color]}): "))
            gpio_pins[color] = pin
        except ValueError:
            print("‚ö†Ô∏è Hib√°s √©rt√©k, megtartva a r√©gi GPIO-t.")
    init_leds() # √öjra inicializ√°lja a LED-eket az √∫j pinekkel

def change_led_behavior():
    """Lehet≈ëv√© teszi a h≈ëm√©rs√©klethez tartoz√≥ LED sz√≠nek be√°ll√≠t√°s√°t."""
    global led_below_limit, led_above_limit
    print("\nüé® LED sz√≠nek be√°ll√≠t√°sa a h≈ëm√©rs√©klet alapj√°n (20¬∞C a hat√°r):")
    below_input = input("20¬∞C alatt milyen LED sz√≠n legyen (piros/z√∂ld/k√©k): ").strip().lower()
    above_input = input("20¬∞C felett milyen LED sz√≠n legyen (piros/z√∂ld/k√©k): ").strip().lower()

    if below_input in COLORS and above_input in COLORS:
        led_below_limit = below_input
        led_above_limit = above_input
        print(f"‚úÖ Be√°ll√≠tva: <=20¬∞C ‚ûú {led_below_limit.upper()}, >20¬∞C ‚ûú {led_above_limit.upper()}")
    else:
        print("‚ö†Ô∏è Hib√°s sz√≠n! Vissza√°ll√≠t√°s alap√©rtelmezettre (piros / k√©k).")
        led_below_limit, led_above_limit = 'piros', 'k√©k'

def change_thingspeak_settings():
    """Lehet≈ëv√© teszi a Thingspeak be√°ll√≠t√°sok m√≥dos√≠t√°s√°t."""
    global THINGSPEAK_CHANNEL_ID, THINGSPEAK_WRITE_API_KEY, THINGSPEAK_USER_API_KEY
    print("\n‚òÅÔ∏è Thingspeak be√°ll√≠t√°sok m√≥dos√≠t√°sa:")
    THINGSPEAK_CHANNEL_ID = input(f"Thingspeak csatorna ID (jelenleg {THINGSPEAK_CHANNEL_ID}): ").strip()
    THINGSPEAK_WRITE_API_KEY = input(f"Thingspeak √çr√≥ API kulcs (jelenleg {THINGSPEAK_WRITE_API_KEY}): ").strip()
    THINGSPEAK_USER_API_KEY = input(f"Thingspeak Felhaszn√°l√≥i API kulcs (jelenleg {THINGSPEAK_USER_API_KEY}): ").strip()
    print("‚úÖ Thingspeak be√°ll√≠t√°sok friss√≠tve.")

def perform_thingspeak_data_delete():
    """Bek√©ri a t√∂rlend≈ë id≈ëtartamot √©s v√©grehajtja a t√∂rl√©st."""
    try:
        minutes = int(input("H√°ny perccel ezel≈ëtti adatokat t√∂r√∂lj√ºk? (pl. 5 perc az utols√≥ 5 percet t√∂rli): "))
        if minutes >= 0:
            delete_thingspeak_data(minutes)
        else:
            print("‚ö†Ô∏è √ârv√©nytelen id≈ëtartam, pozit√≠v sz√°mot adj meg!")
    except ValueError:
        print("‚ö†Ô∏è Hib√°s √©rt√©k, csak sz√°mot adj meg!")

# --- F≈ë m≈±k√∂d√©si ciklus ---

def run_sensor_loop_and_thingspeak():
    """Futtatja a szenzor olvas√°st, LED vez√©rl√©st √©s Thingspeak k√ºld√©st."""
    print("\n‚ñ∂Ô∏è Rendszer ind√≠t√°sa... Nyomj CTRL+C-t a kil√©p√©shez.")
    try:
        while True:
            humidity, temp = Adafruit_DHT.read_retry(DHT_SENSOR, DHT_PIN)
            if temp is not None:
                print(f"\nüå°Ô∏è H≈ëm√©rs√©klet: {temp:.1f}¬∞C, üíß P√°ratartalom: {humidity:.1f}%")
                # LED be√°ll√≠t√°sa
                if temp <= TEMP_LIMIT:
                    set_led(led_below_limit)
                else:
                    set_led(led_above_limit)
                # Adatok k√ºld√©se Thingspeakre
                send_to_thingspeak(temp, humidity)
            else:
                print("‚ùå Szenzorhiba! Ellen≈ërizd a bek√∂t√©st √©s a szenzort.")
                for led in leds.values():
                    led.value = 0 # Minden LED kikapcsol√°sa hiba eset√©n
            time.sleep(15) # V√°rakoz√°s 15 m√°sodperc a k√∂vetkez≈ë m√©r√©sig

    except KeyboardInterrupt:
        print("\nüõë Kil√©p√©s a ciklusb√≥l...")
    except Exception as e:
        print(f"Hiba t√∂rt√©nt a fut√°s k√∂zben: {e}")
    finally:
        # A ciklusb√≥l val√≥ kil√©p√©skor mindig tiszt√≠tja a GPIO-t
        GPIO.cleanup()
        for led in leds.values():
            led.close() # Biztos√≠tja a LED objektumok bez√°r√°s√°t is

# --- F≈ëmen√º ---

def main_menu():
    """Megjelen√≠ti a f≈ëmen√ºt √©s kezeli a felhaszn√°l√≥i interakci√≥kat."""
    init_leds() # LED-ek inicializ√°l√°sa program ind√≠t√°sakor
    while True:
        print("\n=== SmartTempHub F≈ëmen√º ===")
        print("1. GPIO portok m√≥dos√≠t√°sa")
        print("2. LED sz√≠nek be√°ll√≠t√°sa h≈ëm√©rs√©klet alapj√°n")
        print("3. Thingspeak be√°ll√≠t√°sok m√≥dos√≠t√°sa")
        print("4. Thingspeak adatok t√∂rl√©se (id≈ëalap√∫)")
        print("5. Rendszer ind√≠t√°sa (Szenzor + LED + Thingspeak)")
        print("6. Kil√©p√©s")

        choice = input("V√°lasszon (1-6): ").strip()

        if choice == '1':
            change_gpio_pins()
        elif choice == '2':
            change_led_behavior()
        elif choice == '3':
            change_thingspeak_settings()
        elif choice == '4':
            perform_thingspeak_data_delete()
        elif choice == '5':
            run_sensor_loop_and_thingspeak()
            # Ha a fut√°s befejez≈ëd√∂tt (pl. CTRL+C miatt), visszat√©r a f≈ëmen√ºbe
            init_leds() # √öjra inicializ√°lja a LED-eket a men√ºbe val√≥ visszat√©r√©skor
        elif choice == '6':
            print("üëã Kil√©p√©s a programb√≥l...")
            GPIO.cleanup() # Kil√©p√©skor is tiszt√≠tja a GPIO-kat
            for led in leds.values():
                led.close()
            break
        else:
            print("‚ùå √ârv√©nytelen v√°laszt√°s. K√©rlek, v√°lassz 1 √©s 6 k√∂z√∂tt.")

# A program ind√≠t√°sa a f≈ëmen√ºvel
if __name__ == "__main__":
    main_menu()
