import time
from gpiozero import PWMLED
import Adafruit_DHT
import RPi.GPIO as GPIO

# GPIO m√≥d be√°ll√≠t√°sa (BCM sz√°moz√°s)
GPIO.setmode(GPIO.BCM)

# DHT szenzor t√≠pus √©s GPIO pin defini√°l√°sa
DHT_SENSOR = Adafruit_DHT.DHT11
DHT_PIN = 17 # A DHT11 szenzor a 17-es GPIO l√°bra van k√∂tve

# H≈ëm√©rs√©kleti limit, ami alapj√°n a LED sz√≠ne v√°ltozik
TEMP_LIMIT = 20

# El√©rhet≈ë LED sz√≠nek list√°ja
COLORS = ['piros', 'z√∂ld', 'k√©k']

# Alap√©rtelmezett GPIO kioszt√°s a piros, z√∂ld, k√©k LED-ekhez
gpio_pins = {
    'piros': 21,
    'z√∂ld': 16,
    'k√©k': 20
}

# Alap√©rtelmezett sz√≠nbe√°ll√≠t√°sok a h≈ëm√©rs√©kleti hat√°rokhoz
led_below = 'piros' # <=20¬∞C eset√©n piros
led_above = 'k√©k'   # >20¬∞C eset√©n k√©k

# LED p√©ld√°nyok t√°rol√°s√°ra szolg√°l√≥ sz√≥t√°r (√ºresen indul)
leds = {}

# Funkci√≥: LED p√©ld√°nyok inicializ√°l√°sa a jelenlegi GPIO be√°ll√≠t√°sok alapj√°n
def init_leds():
    global leds
    # Biztos√≠tja, hogy a kor√°bbi LED objektumok megfelel≈ëen legyenek le√°ll√≠tva, ha √∫jra inicializ√°lunk
    for led in leds.values():
        led.close() # Felszabad√≠tja a GPIO er≈ëforr√°sokat
    leds = {
        'piros': PWMLED(gpio_pins['piros']),
        'z√∂ld': PWMLED(gpio_pins['z√∂ld']),
        'k√©k': PWMLED(gpio_pins['k√©k'])
    }
    print("‚úÖ LED-ek inicializ√°lva az √∫j GPIO-kkal.")

# Funkci√≥: A megfelel≈ë LED sz√≠n bekapcsol√°sa
def set_led(color):
    # Minden LED kikapcsol√°sa
    for led in leds.values():
        led.value = 0
    # A kiv√°lasztott sz√≠n≈± LED bekapcsol√°sa (1-es √©rt√©kkel, ami teljes f√©nyer≈ë)
    if color in leds:
        leds[color].value = 1
        print(f"üîî LED: {color.upper()} ({'<=20¬∞C' if color == led_below else '>20¬∞C'})")
    else:
        print(f"‚ö†Ô∏è Hib√°s LED sz√≠n megadva: {color}")

# Funkci√≥: GPIO portok m√≥dos√≠t√°sa felhaszn√°l√≥i bevitel alapj√°n
def change_gpio():
    print("\nüéõÔ∏è GPIO m√≥dos√≠t√°s:")
    for color in COLORS:
        try:
            # Bek√©ri a felhaszn√°l√≥t√≥l az √∫j GPIO pin sz√°mot
            pin = int(input(f"{color.upper()} LED GPIO (jelenleg {gpio_pins[color]}): "))
            gpio_pins[color] = pin
        except ValueError:
            print("‚ö†Ô∏è Hib√°s √©rt√©k, megtartva a r√©gi GPIO-t.")
    print("‚úÖ GPIO-k friss√≠tve.")
    init_leds() # √öjra inicializ√°lja a LED p√©ld√°nyokat az √∫j GPIO-kkal

# Funkci√≥: A h≈ëm√©rs√©klethez tartoz√≥ LED sz√≠nek be√°ll√≠t√°sa
def change_behavior():
    global led_below, led_above
    print("\nüé® LED sz√≠nek be√°ll√≠t√°sa a h≈ëm√©rs√©klet alapj√°n:")
    # Bek√©ri a k√≠v√°nt sz√≠neket
    led_below_input = input("20¬∞C alatt milyen LED sz√≠n legyen (piros/z√∂ld/k√©k): ").strip().lower()
    led_above_input = input("20¬∞C felett milyen LED sz√≠n legyen (piros/z√∂ld/k√©k): ").strip().lower()

    # Ellen≈ërzi, hogy √©rv√©nyes sz√≠nek lettek-e megadva
    if led_below_input in COLORS and led_above_input in COLORS:
        led_below = led_below_input
        led_above = led_above_input
        print(f"‚úÖ Be√°ll√≠tva: <=20¬∞C ‚ûú {led_below.upper()}, >20¬∞C ‚ûú {led_above.upper()}")
    else:
        print("‚ö†Ô∏è Hib√°s sz√≠n! Vissza√°ll√≠t√°s alap√©rtelmezett √©rt√©kekre (piros / k√©k).")
        led_below, led_above = 'piros', 'k√©k'

# Funkci√≥: Szenzor adatgy≈±jt√©s √©s LED-vez√©rl√©s ind√≠t√°sa
def run_sensor_loop():
    print("\n‚ñ∂Ô∏è Ind√≠t√°s... Nyomj CTRL+C-t a kil√©p√©shez.")
    try:
        while True:
            # H≈ëm√©rs√©klet √©s p√°ratartalom olvas√°sa a DHT11 szenzorr√≥l
            humidity, temp = Adafruit_DHT.read_retry(DHT_SENSOR, DHT_PIN)
            if temp is not None:
                # Adatok ki√≠r√°sa a konzolra
                print(f"\nüå°Ô∏è H≈ëm√©rs√©klet: {temp:.1f}¬∞C, üíß P√°ratartalom: {humidity:.1f}%")
                # LED sz√≠n kiv√°laszt√°sa a h≈ëm√©rs√©klet alapj√°n
                if temp <= TEMP_LIMIT:
                    set_led(led_below)
                else:
                    set_led(led_above)
            else:
                print("‚ùå Szenzorhiba! Ellen≈ërizd a bek√∂t√©st √©s a szenzort.")
                # Minden LED kikapcsol√°sa hiba eset√©n
                for led in leds.values():
                    led.value = 0
            time.sleep(10) # V√°rakoz√°s 10 m√°sodpercet a k√∂vetkez≈ë m√©r√©sig

    except KeyboardInterrupt:
        print("\nüõë Kil√©p√©s...")
    finally:
        # Program befejez√©sekor a GPIO l√°bak tiszt√≠t√°sa
        GPIO.cleanup()

# F≈ëmen√º megjelen√≠t√©se √©s a felhaszn√°l√≥i v√°laszt√°sok kezel√©se
def main_menu():
    init_leds() # A LED-ek inicializ√°l√°sa a program elej√©n
    while True:
        print("\nüìã F≈ëmen√º:")
        print("1. GPIO portok m√≥dos√≠t√°sa")
        print("2. Sz√≠nek be√°ll√≠t√°sa 20¬∞C alatt/felett")
        print("3. LED-vez√©rl√©s ind√≠t√°sa")
        print("4. Kil√©p√©s")

        choice = input("V√°laszt√°s (1-4): ").strip()
        if choice == '1':
            change_gpio()
        elif choice == '2':
            change_behavior()
        elif choice == '3':
            run_sensor_loop()
            # Ha a run_sensor_loop lefutott (pl. CTRL+C miatt), visszat√©r a f≈ëmen√ºbe
        elif choice == '4':
            print("üëã Kil√©p√©s...")
            GPIO.cleanup() # Kil√©p√©skor is tiszt√≠tja a GPIO-kat
            break
        else:
            print("‚ùå √ârv√©nytelen v√°laszt√°s. K√©rlek, v√°lassz 1 √©s 4 k√∂z√∂tt.")

# A program ind√≠t√°sa a f≈ëmen√ºvel
if __name__ == "__main__":
    main_menu()
